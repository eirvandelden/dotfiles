### DEFAULTS
Host *
  # Advised:
  # Enabling Forwarding by default is a REALLY BAD IDEA. Any server you login to can use your keys if you enable this.
  ForwardAgent no
  SendEnv LANG LC_*
  # The IdentitiesOnly setting, combined with the IdentityFile defined with each host, makes sure that only the key you specify will be used. If you don't specify this, ssh will automatically try to use all the keys in the agent, exposing your keys to all servers.
  IdentitiesOnly yes
  Port 22
  Protocol 2
  UseRoaming no
  ServerAliveInterval 180
  # Only allow Public key authentication and disable password logins. To completely disable SSH's password login functions, both `PasswordAuthentication` and `ChallengeResponseAuthentication` must be set to no.
  # If you must enable password logins, specify an additional Host-block where you can set `PasswordAuthentication yes`
  PubkeyAuthentication yes
  PasswordAuthentication no
  ChallengeResponseAuthentication no
  ForwardX11 no
  ForwardX11Trusted no
  # There are 4 public key algorithms for authentication (DSA, ECDSA, ED25519 and RSA). Only ED25519 and RSA are enabled.
  HostKeyAlgorithms ssh-ed25519-cert-v01@openssh.com,ssh-rsa-cert-v01@openssh.com,ssh-ed25519,ssh-rsa
  # Symmetric ciphers are used to encrypt the data. Some of them are known to be broken (DES, RC4), others have a (too) small block size (blowfish-cbc, cast128-cbc) or key size. What's left are the ciphers defined here.
  Ciphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr
  # Message authentication codes (MAC) provide integrity. There are Encrypt-then-MAC, Encrypt-and-MAC and MAC-then-encrypt options. Only Encrypt-then-MAC should be used, and taking the hash algorithm (no MD5 and SHA1) and tag and key sizes into account this defined list are the MACs left.
  MACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-512,hmac-sha2-256,umac-128@openssh.com
  # There are 8 key exchange protocols. For the same reason as with HostKeyAlgorithms, ECDH curves are no option and neither are algorithms with a too small modulus (<1024 bits). Last but not least, SHA1 is broken. What's left are the algorithms defined above.
  KexAlgorithms curve25519-sha256@libssh.org,diffie-hellman-group-exchange-sha256
  VerifyHostKeyDNS yes

## HOME Configuration
Host 192.168.1.*
  PubkeyAuthentication no
  PasswordAuthentication yes
  IdentityFile ~/.ssh/id_ed25519

Host *
  IdentityAgent "~/Library/Group Containers/2BUA8C4S2C.com.1password/t/agent.sock"
